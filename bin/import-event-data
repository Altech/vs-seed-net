#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

# This is a tool to import data generated by https://github.com/Altech/renza-publisher
# Please use via rails runner.

require 'pry' if Rails.env.development?
require 'aws-sdk'

abort "Please specify data directory." if not ARGV.first
dir = Pathname.new ARGV.first
abort "The directory was not found." if not dir.exist?

j = JSON.parse (dir + 'metadata.json').read

begin
  ActiveRecord::Base.transaction do
    puts "GameCenter"

    # GameCenter
    unless GameCenter.where(location: j['location']).exists?
      puts "location:#{j['location']}"
      puts "Please input the station and the name by line."
      print "  station:"; station = STDIN.gets.strip!
      print "  name:";    name    = STDIN.gets.strip!
      puts "DONE!"
      game_center_record = {
        station: station,
        name: name,
        location: j['location']
      }
      GameCenter.create!(game_center_record)
    end
    game_center = GameCenter.where(location: j['location']).first

    puts "Event"
    # Event
    event = if Event.where(held_at: Time.parse(j['time']), game_center_id: game_center.id).exists?
              Event.where(held_at: Time.parse(j['time']), game_center_id: game_center.id).first
            else
              event_record = {
                held_at: Time.parse(j['time']),
                game_center_id: game_center.id
              }
              Event.create!(event_record)
            end

    puts "Video"

    # Video
    j['video_ids'].each_with_index do |video_id,i|
      puts i
      video = if Video.where(youtube_video_id: video_id).exists?
                       Video.where(youtube_video_id: video_id).first
                     else
                       video_record = {
                         youtube_video_id: video_id,
                         win_or_lose: case j['win_or_lose'][i]
                                      when 'win'
                                        true
                                      when 'lose'
                                        false
                                      else
                                        puts "Win or lose data is empty!"
                                        true
                                      end
                       }
                       Video.create!(video_record)
                     end

      game = if Game.where(event_id: event.id, index_of_event: i).exists?
               Game.where(event_id: event.id, index_of_event: i).first
             else
               Game.new(event_id: event.id, index_of_event: i)
             end
      game["#{j['seat'] || 'a1'}_video_id".to_sym] = video.id
      game.save

      next unless j['seat'].nil? or j['seat'] == 'a1'

      # Thumbnail
      s3 = AWS::S3.new(YAML.load(File.read "#{Rails.root}/config/s3.yml")[Rails.env])
      bucket_name = "vs-seed-#{Rails.env}"
      file_name = sprintf("vol%03d_thumb_vs_seed_net.jpg", i+1)
      unless s3.buckets.map(&:name).include? bucket_name
        s3.buckets.create bucket_name
      end
      bucket = s3.buckets[bucket_name]
      object = bucket.objects["videos/thumbnails/#{game.id}/original.jpg"]
      object.write(Pathname.new(dir + file_name), acl: :public_read) # [TODO] use Altech/renza-publisher
      game.thumbnail_file_name = file_name
      game.thumbnail_content_type = 'image/jpeg'
      game.thumbnail_file_size = File.size(dir + file_name)
      game.thumbnail_updated_at = Time.now
      game.save
    end
  end
rescue => e
  puts <<MSG
All changes except GameCenter was rollbacked.
Thumbnails on the S3 bucket was not rollbacked.
MSG
  p e.inspect
end
